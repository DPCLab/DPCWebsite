extends ../blog-layout.pug
block vars
  -var data = JSON.parse(read("./src/views/russia/machine-learning-troll-detection/config.json"));
  -var title = data.title
  -var subtitle = data.subtitle
  -var date = data.date
  -var featured_image_url = data.featured_image_url
  -var featured_image_alt  = data.featured_image_alt
  -var featured_image_caption  = data.featured_image_caption
  -var featured_image_credit = data.featured_image_credit
  -var tag = data.tag

block body 
  include ../../components/ml-troll-detector.pug
  p Over the course of the 2016 election and beyond, the Russian government conducted a <a href = "https://dpclab.org/russia/intro-to-russian-meddling/">massive disinformation campaign</a> to divide the American public, sow distrust, and influence electoral outcomes. In October 2018, Twitter <a href = "https://blog.twitter.com/official/en_us/topics/company/2018/enabling-further-research-of-information-operations-on-twitter.html">released</a> a comprehensive dataset of more than 9 million Russian troll Tweets. Today, we’re proud to release an interactive machine learning model that helps make the Russian disinformation campaign just slightly more accessible.
  br
  p Given any English Tweet, our model determines whether that Tweet uses language specifically popular among Russian trolls—or whether the Tweet more closely resembles organic content. And while the model can distinguish between a representative sample of organic Tweets and Russian Twitter disinformation with more than 90% accuracy, it isn’t meant to uncover hidden Russian agents online; instead, it’s an educational tool designed to shed light on the type of content disproportionately conveyed by the Russian trolls. To try out the model yourself, tag <a href = "https://twitter.com/TrackTheTrolls">@TrackTheTrolls</a> in response to a Tweet, or use the tool below.
  br
  +ml-troll-detector() 
  br
  h1 Limitations and caveats—
  p Our <a href="https://scikit-learn.org/stable/index.html#"><i>scikit-learn</i></a>-powered model uses an explainable machine learning algorithm to weigh the similarities of any given text to Russian troll content versus organic posts. The model helps to expose language that is specifically popular among trolls in an accessible and interactive manner. Our model <i>does not</i> detect yet-undiscovered trolls online, nor would it be able to. Instead, it’s an educational tool designed to detect patterns in troll language—nothing more, nothing less.
  br
  p Here are a few caveats to keep in mind when playing with our model:
  br
  ul 
    li Just because the model identifies a word as being specifically popular among Russian IRA trolls doesn’t mean that the word is inherently ‘troll-like.’ Some terms, like “#BlackLivesMatter,” aren’t troll-like at all, but because they appear more frequently in IRA text than in recent organic discourse on Twitter, our model considers them to be a signal of especially troll-like content.
    li Our model is tuned for 2018 organic Twitter content. In 2020, our model may be far less accurate—language changes over time, especially on platforms such as Twitter, and our model may soon be obsolete.
    li We look at language, not context. Our model isn’t smart enough to understand the nuance of online discourse. In fact, despite being relatively accurate, our model is primitive by human standards: it looks at words individually, and doesn’t have any conception of context. Its intelligence emerges at scale, when it identifies patterns across millions of words. In a single 280-character Tweet, there’s only so much it can do. 
  br
  h1 How it works—
  p To analyze a Tweet, our model passes the Tweet’s text through a complex—but explainable—process. Following the tried-and-true method of using a <i>scikit-learn</i> Naive Bayes classifier for text analysis in Python, we assembled our model using a Count Vectorizer, TF-IDF preprocessor, and finally a multinomial Naive Bayes classifier. For the more technically inclined, here’s the core architecture of our model:
  br
  script(src="https://gist.github.com/milesmcc/072b6f7be6b72c154e921a6e2c6fa7d0.js")
  p That’s right—with <i>scikit-learn</i>, it only takes three lines of code to define the model’s skeleton! While we won’t detail the ‘glue code’ that holds everything together here, the entire project is <a href = "https://github.com/dpclab/RussianMeddling">open source</a> on GitHub. (For information about the data on which we trained our model, see ‘Data sourcing’ below.)
  br 
  p Here’s how the machine learning model works, in plain English:
  br
  ol 
    li First, the model splits the text into its parts (words), called <i>tokens</i>. It counts the total number of times each token appears in the text, and then returns this value as a <i>vector</i>. In our model, this is performed by the industry-standard <i>scikit-learn</i> <span class = "monospace">CountVectorizer</span>.
    li Then, the model compares the relative frequency of each token to its relative frequency in the training datasets. This helps identify the important words in a sentence while filtering out unimportant words (such as “and”, “to be”, and “a.”) This process, called <a href = "https://nlp.stanford.edu/IR-book/html/htmledition/inverse-document-frequency-1.html">TF-IDF</a>, is performed by <i>scikit-learn</i>’s <span class = "monospace">TfidfTransformer</span>.
    li Finally, our model analyzes the relative token frequencies created by the <span class = "monospace">CountVectorizer</span> and the <span class = "monospace">TfidfTransformer</span> to determine whether the model uses language that is specifically popular among organic or Russian IRA troll content. This statistical analysis is performed by <i>scikit-learn</i>’s <span class = "monospace">MultinomialNB</span> classifier.
  br
  h1 Data sourcing and software libraries—
  p Our model is built from a corpus of a corpus of 4.6 million English Tweets, split equally between a random sample of Russian IRA troll tweets released by Twitter and a representative collection of English Tweets collected over a two-week period in October 2018. Because Twitter’s Terms of Service <a href = "https://developer.twitter.com/en/developer-terms/agreement-and-policy.html#f-be-a-good-partner-to-twitter">prohibit</a> the distribution of datasets that include Tweet content, we cannot open-source the entirety of our training data. (If you’re a researcher looking to improve on or reproduce our model, we’re happy to share the data with you individually. Contact us <a href = "mailto:dpclab@sendmiles.email">here</a>.)
  br
  p Like nearly all data science projects, we employed data science libraries to assemble and train our model. Our work would not have been possible without the following two software libraries.
  br
  ul 
    li <a href = "http://scikit-learn.org/stable/index.html#"><strong><i>scikit-learn</i></strong></a>. scikit-learn is a Python library that provides researchers with open-source tools for building machine learning models. It is among the most popular machine learning libraries available, and supports our model's core functionality.
    li <a href = "https://www.nltk.org/"><strong><i>NLTK</i></strong></a>. The Natural Language Toolkit is a popular open-source Python library that provides a number of useful text processing utilities. 
  br
  p Are you interested in using our model in your own software? We built an API to allow you to do just that! Send a HTTP GET request to <span class = "monospace">https://ru.dpccdn.net/analyze/&lt;your URL-encoded text&gt;</span> and you’ll receive a full JSON response. No authentication is required.
  br
  h1 What’s next—
  p To conclude our inquiry into Russian digital propaganda, we will apply our machine learning model ‘in the wild.’ We’ll look at whether Donald Trump’s Tweets incorporate language specifically popular among Russian IRA trolls, and whether 2018 election-related discourse on Twitter has, by this same metric, changed since the 2016 election.
  br 
  p Our ultimate objective is to help spread awareness of the Russian government’s ongoing disinformation campaign in the United States. To this end, we invite you to experiment with the analyzer provided above, or to tag <a href = "https://twitter.com/TrackTheTrolls">@TrackTheTrolls</a> in reply to a Tweet.
  
block scripts
  script(src = "/bower_components/d3/d3.min.js")
  script(src = "/bower_components/typed.js/lib/typed.min.js")
  script(src = "/dist/ml-troll-detector-min.js")
